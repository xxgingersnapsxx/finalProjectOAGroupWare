package kr.or.gw.service;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import kr.or.gw.command.AllWorkCriteria;
import kr.or.gw.command.AllWorkPageMaker;
import kr.or.gw.dao.AtchDAO;
import kr.or.gw.dao.CodeDAO;
import kr.or.gw.dao.JobDAO;
import kr.or.gw.dao.JobRcvDAO;
import kr.or.gw.dto.AtchMnflVO;
import kr.or.gw.dto.JobMngtVO;

public class JobServiceImpl implements JobService {

	private JobDAO jobDAO;
	public void setJobDAO(JobDAO jobDAO) {
		this.jobDAO = jobDAO;
	}
	private JobRcvDAO jobRcvDAO;
	public void setJobRcvDAO(JobRcvDAO jobRcvDAO) {
		this.jobRcvDAO = jobRcvDAO;
	}
	private AtchDAO atchDAO;
	public void setAtchDAO(AtchDAO atchDAO) {
		this.atchDAO = atchDAO;
	}
	private CodeDAO codeDAO;
	public void setCodeDAO(CodeDAO codeDAO) {
		this.codeDAO = codeDAO;
	}
	
	//공통
	@Override
	public JobMngtVO getJob(String job_no) throws SQLException {
		JobMngtVO job = jobDAO.selectJobByJno(job_no);
		addAtchList(job);
		return job;
	}
	@Override
	public void remove(String job_no) throws SQLException {
		jobDAO.deleteJob(job_no);
	}
	
	
	
	//업무 지시하기
	@Override
	public void sendRegist(JobMngtVO job) throws SQLException {
		String job_no = jobDAO.selectJobSeqNextValue();
		job.setJob_no(job_no);
		
		int index = 0;
		if(job.getAtchList() != null) {
			for(AtchMnflVO atch : job.getAtchList()) {
				atch.setBbsctt_no(job_no);
				atch.setAtch_order(index);
				atchDAO.insertAtch(atch);
				index++;
			}
		}
		
//		if(job.getJrcvList() != null) {
//			for(JobRcvVO jobrcv : job.getJrcvList()) {
//				jobrcv.setJob_no(job_no);
//				jobrcv.setRcver_empno();
//				jobrcv.setRcver_empnm();
//				jobrcv.setRcver_progrs(0);
//				jobrcv.setRcver_order(index);
//				jobRcvDAO.insertJobRcv(jobrcv);
//				index++;
//			}
//		}

		
		//im_code 		낮음, 보통, 긴급
		//sttus_code	대기, 진행, 완료, 지연
		
		//스트링으로 받아온 다음 스트링에 해당하는 코드값을 불러와야한다.
		String im = job.getIm_code();
		String im_code = codeDAO.selectCodeNoByDc(im);
		job.setIm_code(im_code);
		
		String sttus = job.getSttus_code();
		String sttus_code = codeDAO.selectCodeNoByDc(sttus);
		job.setSttus_code(sttus_code);
		
		jobDAO.insertJob(job);
	}
	
	//업무 수정
	@Override
	public void modify(JobMngtVO job) throws SQLException {

		int index = 1+job.getAtchList().size();
		if(job.getAtchList() != null) {
			for(AtchMnflVO atch : job.getAtchList()) {
				atch.setBbsctt_no(job.getJob_no());
				atch.setAtch_order(index);
				atchDAO.insertAtch(atch);
				index++;
			}
		}
		
		String im = job.getIm_code();
		String im_code = codeDAO.selectCodeNoByDc(im);
		job.setIm_code(im_code);
		
		String sttus = job.getSttus_code();
		String sttus_code = codeDAO.selectCodeNoByDc(sttus);
		job.setSttus_code(sttus_code);
	
		jobDAO.updateJob(job);
	}
	
	//전체업무조회
	@Override
	public Map<String, Object> getJobList(AllWorkCriteria cri) throws SQLException {
		
		Map<String, Object> dataMap = new HashMap<String, Object>();
		
		// 현재 page 번호에 맞는 리스트를 perPageNum 개수 만큼 가져온다.
		List<JobMngtVO> jobList = jobDAO.selectSearchJobList(cri);
		
		if(jobList != null) {
			for(JobMngtVO alljob : jobList) {
				addAtchList(alljob);
			}
		}
		int totalCount = jobDAO.selectSearchJobListCount(cri);
		
		
		// pageMaker 생성
		AllWorkPageMaker pageMaker = new AllWorkPageMaker();
		pageMaker.setCri(cri);
		pageMaker.setTotalCount(totalCount);
		
		dataMap.put("jobList", jobList);
		dataMap.put("pageMaker", pageMaker);
		
		return dataMap;
	}

	//지시 업무 조회
	@Override
	public Map<String, Object> getJobSendList(AllWorkCriteria cri, int drctr_empno) throws SQLException {
		
		Map<String, Object> dataMap = new HashMap<String, Object>();
		
		// 현재 page 번호에 맞는 리스트를 perPageNum 개수 만큼 가져온다.
		List<JobMngtVO> jobSendList = jobDAO.selectSearchJobSendList(cri, drctr_empno);
		
		if(jobSendList != null) {
			for(JobMngtVO alljob : jobSendList) {
				addAtchList(alljob);
			}
		}
		
		int totalCount = jobDAO.selectSearchJobSendListCount(cri, drctr_empno);
		
		// pageMaker 생성
		AllWorkPageMaker pageMaker = new AllWorkPageMaker();
		pageMaker.setCri(cri);
		pageMaker.setTotalCount(totalCount);
		
		dataMap.put("jobSendList", jobSendList);
		dataMap.put("pageMaker", pageMaker);
		
		return dataMap;
	}
	
	//완료리스트조회
	@Override
	public Map<String, Object> getJobCompletionList(AllWorkCriteria cri) throws SQLException {
		
		Map<String, Object> dataMap = new HashMap<String, Object>();
		
		// 현재 page 번호에 맞는 리스트를 perPageNum 개수 만큼 가져온다.
		List<JobMngtVO> jobList = jobDAO.selectSearchJobCompletionList(cri);
		
		if(jobList != null) {
			for(JobMngtVO alljob : jobList) {
				addAtchList(alljob);
			}
		}

		int totalCount = jobDAO.selectSearchJobCompletionListCount(cri);
		
		// pageMaker 생성
		AllWorkPageMaker pageMaker = new AllWorkPageMaker();
		pageMaker.setCri(cri);
		pageMaker.setTotalCount(totalCount);
		
		dataMap.put("jobList", jobList);
		dataMap.put("pageMaker", pageMaker);
		
		return dataMap;
	}
	
	//첨부파일
	@Override
	public AtchMnflVO getAttachByFileNo(String file_no) throws SQLException {
		AtchMnflVO atch = atchDAO.selectAtchByFileNo(file_no);
		return atch;
	}
	
	@Override
	public void removeAttachByFileNo(String file_no) throws SQLException {
		atchDAO.deleteAtch(file_no);
	}
	
	private void addAtchList(JobMngtVO job) throws SQLException{
		if(job == null) {
			return;
		}
		String job_no = job.getJob_no();
		List<AtchMnflVO> atchList = atchDAO.selectAtchByBbscttNo(job_no);
		
		job.setAtchList(atchList);
	}
	
	
}

